on: [push]
name: "Docker build"
jobs:
    build-docker-images:
        name: Build PHP-FPM and Elasticsearch images
        runs-on: ubuntu-20.04
        steps:
            -   name: GIT checkout branch - ${{ github.ref }}
                uses: actions/checkout@v2
                with:
                    ref: ${{ github.ref }}
            -   name: Login to Docker Hub
                uses: docker/login-action@v1
                with:
                    username: ${{ secrets.DOCKER_USERNAME }}
                    password: ${{ secrets.DOCKER_PASSWORD }}
            -   name: Check if PHP-FPM image exists
                env:
                    DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
                run: |
                    echo "DOCKER_USERNAME=${DOCKER_USERNAME}" >> $GITHUB_ENV
                    DOCKER_PHP_FPM_IMAGE_TAG=`find project-base/docker/php-fpm -type f -exec md5sum {} \; | md5sum | awk '{ print $1 }'`
                    echo "DOCKER_PHP_FPM_IMAGE_TAG=${DOCKER_PHP_FPM_IMAGE_TAG}" >> $GITHUB_ENV
                    curlResponse=`curl --silent -f -lSL https://index.docker.io/v1/repositories/${DOCKER_USERNAME}/php-fpm/tags/${DOCKER_PHP_FPM_IMAGE_TAG} > /dev/null ; echo $?`
                    if [[ $curlResponse == 0 ]]; then
                        DOCKER_PHP_FPM_IMAGE_EXISTS=1
                    else
                        DOCKER_PHP_FPM_IMAGE_EXISTS=0
                    fi
                    echo "DOCKER_PHP_FPM_IMAGE_EXISTS=${DOCKER_PHP_FPM_IMAGE_EXISTS}" >> $GITHUB_ENV
            -   name: Build PHP-FPM image and push it to Docker Hub
                if: env.DOCKER_PHP_FPM_IMAGE_EXISTS == 0
                run: |
                    docker image build \
                        --build-arg project_root=project-base \
                        --build-arg www_data_uid=$(id -u) \
                        --build-arg www_data_gid=$(id -g) \
                        --tag ${DOCKER_USERNAME}/php-fpm:${DOCKER_PHP_FPM_IMAGE_TAG} \
                        --target development \
                        --no-cache \
                        --compress \
                        -f project-base/docker/php-fpm/Dockerfile \
                        . &&
                    docker image push ${DOCKER_USERNAME}/php-fpm:${DOCKER_PHP_FPM_IMAGE_TAG}
            -   name: Check if Elasticseach image exists
                run: |
                    DOCKER_ELASTICSEARCH_IMAGE_TAG=`find project-base/docker/elasticsearch -type f -exec md5sum {} \; | md5sum | awk '{ print $1 }'`
                    echo "DOCKER_ELASTICSEARCH_IMAGE_TAG=${DOCKER_ELASTICSEARCH_IMAGE_TAG}" >> $GITHUB_ENV
                    curlResponse=`curl --silent -f -lSL https://index.docker.io/v1/repositories/${DOCKER_USERNAME}/elasticsearch/tags/${DOCKER_ELASTICSEARCH_IMAGE_TAG} > /dev/null ; echo $?`
                    if [[ $curlResponse == 0 ]]; then
                        DOCKER_ELASTICSEARCH_IMAGE_EXISTS=1
                    else
                        DOCKER_ELASTICSEARCH_IMAGE_EXISTS=0
                    fi
                    echo "DOCKER_ELASTICSEARCH_IMAGE_EXISTS=${DOCKER_ELASTICSEARCH_IMAGE_EXISTS}" >> $GITHUB_ENV
            -   name: Build Elasticsearch image and push it to Docker Hub
                if: env.DOCKER_ELASTICSEARCH_IMAGE_EXISTS == 0
                run: |
                    docker image build \
                        --tag ${DOCKER_USERNAME}/elasticsearch:${DOCKER_ELASTICSEARCH_IMAGE_TAG} \
                        --no-cache \
                        --compress \
                        -f project-base/docker/elasticsearch/Dockerfile \
                        . &&
                    docker image push ${DOCKER_USERNAME}/elasticsearch:${DOCKER_ELASTICSEARCH_IMAGE_TAG}
            -   name: Copy and rename docker-compose.ci.yml.dist to docker-compose.yml
                run: cp -f ./docker/conf/docker-compose.ci.yml.dist ./docker-compose.yml
            -   name: Update docker-compose.yml file with right PHP-FPM image
                run: "sed -i \"s#php-fpm-image#${{ secrets.DOCKER_USERNAME }}/php-fpm:${DOCKER_PHP_FPM_IMAGE_TAG}-${{ github.sha }}#\" ./docker-compose.yml"
            -   name: Update docker-compose.yml file with right Elastichsearch image
                run: "sed -i \"s#elasticsearch-image#${{ secrets.DOCKER_USERNAME }}/elasticsearch:${DOCKER_ELASTICSEARCH_IMAGE_TAG}#\" ./docker-compose.yml"
            -   name: Create branch specific PHP-FPM image with project files
                run: |
                    docker run -d --name php-fpm ${{ secrets.DOCKER_USERNAME }}/php-fpm:${DOCKER_PHP_FPM_IMAGE_TAG}
                    docker cp ./ php-fpm:/var/www/html
                    docker exec php-fpm composer install
                    docker exec php-fpm php phing dirs-create test-dirs-create assets npm build-version-generate
            -   name: Push branch specific PHP-FPM image to Docker Hub
                run: |
                    docker commit -m="Include Composer and NPM files" php-fpm ${{ secrets.DOCKER_USERNAME }}/php-fpm:${DOCKER_PHP_FPM_IMAGE_TAG}-${{ github.sha }}
                    docker image push ${{ secrets.DOCKER_USERNAME }}/php-fpm:${DOCKER_PHP_FPM_IMAGE_TAG}-${{ github.sha }}
            -   name: Upload docker-compose.yml to artifacts
                uses: actions/upload-artifact@v2
                with:
                    name: docker-compose
                    path: ./docker-compose.yml
    standards:
        name: Check standards
        needs: build-docker-images
        runs-on: ubuntu-20.04
        steps:
            -   name: GIT checkout branch - ${{ github.ref }}
                uses: actions/checkout@v2
                with:
                    ref: ${{ github.ref }}
            -   name: Download docker-compose.yml from artifacts
                uses: actions/download-artifact@v2
                with:
                    name: docker-compose
            -   name: Build application
                run: docker-compose up -d php-fpm
            -   name: Check standards
                run: docker-compose exec -T php-fpm php phing standards
    tests-unit-functional-smoke:
        name: Run unit, functional and smoke tests
        needs: build-docker-images
        runs-on: ubuntu-20.04
        steps:
            -   name: GIT checkout branch - ${{ github.ref }}
                uses: actions/checkout@v2
                with:
                    ref: ${{ github.ref }}
            -   name: Download docker-compose.yml from artifacts
                uses: actions/download-artifact@v2
                with:
                    name: docker-compose
            -   name: Build application
                run: |
                    docker-compose pull --parallel postgres elasticsearch redis php-fpm
                    docker-compose up -d postgres elasticsearch redis php-fpm
                    docker-compose exec -T php-fpm php phing db-create test-db-create db-demo elasticsearch-index-recreate elasticsearch-export error-pages-generate
            -   name: Run tests
                run: docker-compose exec -T php-fpm php phing tests
            -   name: Upload logs to artifacts
                if: ${{ failure() }}
                uses: actions/upload-artifact@v2
                with:
                    name: tests-logs
                    path: ./project-base/var/log/
    tests-acceptance:
        name: Run acceptance tests
        needs: build-docker-images
        runs-on: ubuntu-20.04
        steps:
            -   name: GIT checkout branch - ${{ github.ref }}
                uses: actions/checkout@v2
                with:
                    ref: ${{ github.ref }}
            -   name: Download docker-compose.yml from artifacts
                uses: actions/download-artifact@v2
                with:
                    name: docker-compose
            -   name: Build application
                run: |
                    docker-compose pull --parallel webserver postgres elasticsearch redis php-fpm selenium-server
                    docker-compose up -d
                    docker-compose exec -T php-fpm php phing dirs-create db-create test-db-create db-demo error-pages-generate test-db-demo test-elasticsearch-index-recreate test-elasticsearch-export tests-acceptance-build
            -   name: Run acceptance tests
                run: docker-compose exec -T php-fpm php phing tests-acceptance
            -   name: PHP-FPM container logs
                if: ${{ failure() }}
                run: docker-compose logs php-fpm
            -   name: Copy logs from container
                if: ${{ failure() }}
                run: docker cp shopsys-framework-php-fpm:/var/www/html/project-base/var/log ./project-base/var/log
            -   name: Upload logs to artifacts
                if: ${{ failure() }}
                uses: actions/upload-artifact@v2
                with:
                    name: acceptance-logs
                    path: ./project-base/var/log/
